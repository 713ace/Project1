<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>blue_idle</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Initialize Variables
//Gravity
grav = 0.75;
//Horizonal Speed
hsp = 0;
//Vertical Speed
vsp = 0;
//Movement Speed
msp = 4;
//Jump Speed
jsp = 7;
//Grounded (Check if On Ground)
grounded = 0;
//Tilt  0 = Flat, 1 = Left, 2 = Right
tilt = 0;
//Falling
fallcheck = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement Input
//Establish Virtual Keys and Movement
key_right = keyboard_check(vk_right);
key_left = keyboard_check(vk_left);
key_up = keyboard_check(vk_up);
key_down = keyboard_check(vk_down);
//Move Left and Right
if key_left
{
    hsp = -msp;
}
if key_right
{
    hsp = msp;
}
//Neutral Input (Both Pushed)
if ((key_right and key_left) or (!key_right and !key_left))
{
    hsp = 0;
}
//Jumping
if (key_up)
{
    if (grounded)
    {
        vsp = -15;
    }
}
vsp += grav;
//Vertical Collision
if place_meeting(x,y+vsp,par_tile)
{
    while (!place_meeting(x,y+sign(vsp),par_tile)) 
    {
        y += sign(vsp);
    }
    if sign(vsp) = 1
    {
        grounded = 1;
    }
    vsp = 0;
}
else
{
    grounded = 0;
}
y += vsp;
//Horzontal Collision Basic and Angular Movement
if place_meeting(x+hsp,y,par_tile)
{
    yplus = 0;
    while (place_meeting(x+hsp,y-yplus,par_tile) and yplus &lt;= abs(1*hsp))
    {
        yplus += 1;
        if (hsp &lt; 0)
        {
            tilt = 1;
        }
        if (hsp &gt; 0)
        {
            tilt = 2;
        }
    }
    tilt = 0;
    if place_meeting(x+hsp,y-yplus,par_tile)
    {
        while (!place_meeting(x+sign(hsp),y,par_tile))
        {
            x += sign(hsp)
        }
    hsp = 0;
    }
    else
    {
        y -= yplus;
    }
}
x += hsp;
//Change Sprites
if ((vsp &gt; 0) and (tilt = 0))
{
    sprite_index = blue_fall
    fallcheck = 1;
}
if (vsp &lt; 0)
{
    sprite_index = blue_jump
    image_speed = 0.1
}
if ((vsp = 0) and (fallcheck = 0) and (hsp = 0))
{
    sprite_index = blue_idle
}
if ((vsp = 0) and (hsp != 0) and (tilt = 0))
{
    sprite_index = blue_walk
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
